Chapter 1 covers the idea of problem domains. A problem domain is 
that which a problem involves in terms of the knowledge bases and areas
in which are required to both understand and solve the problem. 

Highlighted is the importance of understanding the requirements of a 
problem. For example, if you were writing a book on WWII, you would 
need to research and understand the topic area BEFORE 
you could write said book, otherwise the task would be impossible. 


Here, the textbook uses this quote:

    "A problem domain is the part of the world where the computer is to pro- problem domain
    duce effects, together with the means available to produce them, directly
    or indirectly." (Kovitz, 1999)


Problem domains feature two subcategories of understanding:

    - Directly: Includes anything that the software can control, producing 
      the desired effects. An example of this could be the use of monitors,
      mice, keyboards etc...

    - Indirectly: This means anything that is NOT part of the software,
      but is relevant to the problem domain. An example of this could be 
      after an event happens when using the software, the user is informed
      and or prompted by the system. 

    
Problem domain requires common software engineering practices such as 
requirements gathering, as these are essential to solve the problem
at hand (especially if for a customer). 

Lastly, it's important to consider that a problem domain is NOT covered
by a single knowledge domain, where problem domains may overlap. 
Thus, simply because a developer may know assembly and C but not in the 
perspective of how to create an operating system (they may be a network
developer, for instance). 


This chapter then discusses the areas of importance when 
developing an operating system. 

A developer would need to have understanding in the following fields:

    - Understanding of atoms, electrons, charge and thus constructing and using a circuit
    - Logic gates
    - Boolean Algebra
    - Reading and understanding manufacturer manuals
    - Assembly language
    - Low level languages (Predominantly C as this is the language associated with constructing an OS)
    - Computer architecture and components
    - Writing and maintaining well-written documentation


Documentation is essential for maintaining and passing on a knowledge 
base, such that other developers can learn and take over when needed.

Documentation is, however, not only for the use and need of a developer,
often with customer documentation being an essential part of a project.
Thus, it is important to decide how documentation is going to be created,
formatted, and maintained, in such a way that both customers/end-users
and developers will be satisfied and supported. 


The chapter also explains the importance of a software specification, 
another important aspect of software engineering, which ties very closely
with a customer (depending on the developmental method used; most commonly
this is an agile method and thus requires consistent and frequent
liaison/meetings with said customer). 

